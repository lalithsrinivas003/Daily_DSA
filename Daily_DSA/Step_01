I'M Following Striver a2z Sheet
==================================================
ðŸ“… Day 1 - Step 1 : Basics of Java & For Loops
==================================================

Activities:
- Revised Java basics (variables, data types, and input/output).  
- Practiced for loops by solving multiple problems.  
- Completed 22 different pattern programs using nested loops (stars, numbers, and mixed patterns).  

Outcome:
- Strengthened understanding of loops in Java.  
- Improved logic-building skills through pattern problems.  
- Gained more confidence in problem-solving with iterative approaches. 






==================================================
ðŸ“… Day 2 - Step 1 : Basic Math Problems (Striver A2Z)
==================================================
Activities:
- Practiced problems on numbers and basic mathematics in Java.
- Implemented programs for:
  â€¢ Prime Number check  
  â€¢ Greatest Common Factor (GCD)  
  â€¢ Printing all Divisors of a number  
  â€¢ Armstrong Number check  
  â€¢ Palindrome check  
  â€¢ Counting digits in a number  
  â€¢ Reversing a number  

Outcome:
- Strengthened problem-solving using loops and conditionals.  
- Gained confidence in applying mathematical logic with Java.  
- Improved coding speed for beginner-level math-based problems. 





==================================================
ðŸ“… Day 3 - Step 1 : Understanding Recursion (Striver A2Z)
==================================================
Activities:
- Learned the basics of recursion and how function calls work.
- Practiced simple recursion problems in Java:
  â€¢ Print something N times  
  â€¢ Print name N times using recursion  
  â€¢ Print numbers from 1 to N  
  â€¢ Print numbers from N to 1  
  â€¢ Find the sum of first N natural numbers  

Outcome:
- Gained clarity on how recursion replaces loops in certain problems.  
- Understood the concept of base case and recursive case.  
- Built a foundation for solving more advanced recursion problems.  




==================================================
ðŸ“… Day 4 - Step 1 : Recursion Practice (Striver A2Z)
==================================================
Activities:
- Focused on strengthening recursion skills and understanding how multiple recursive calls work.
- Solved the following problems using recursion:
  â€¢ Factorial of N numbers  
  â€¢ Reverse an array  
  â€¢ Check if a string is palindrome or not  
  â€¢ Fibonacci Number  

Outcome:
- Improved understanding of recursion flow and base conditions.  
- Learned how recursive functions call each other and maintain stack frames.  
- Gained confidence to move towards advanced recursion problems. 





==================================================
ðŸ“… Day 5 - Step 1 : Introduction to Hashing (Striver A2Z)
==================================================
Activities:
- Explored the concept of **Hashing** and how it works internally.  
- Learned about **HashMap** in Java and its applications.  
- Practiced inserting and retrieving values using:
  â€¢ put()  
  â€¢ get()  
  â€¢ containsKey()  
  â€¢ containsValue()  
- Understood how **key-value mapping** is done.  
- Studied **collisions** in hashing and how they are handled.  

Outcome:
- Understood why hashing provides efficient search, insert, and delete operations.  
- Gained clarity on how HashMap works internally in Java.  
- Learned how to use HashMap methods effectively for problem-solving.  
- Built a foundation for solving problems using hashing techniques.  





==================================================
ðŸ“… Day 6 - Step 1 : HashMap Practice (Striver A2Z)
==================================================
Activities:
- Continued exploring **HashMaps** in Java.  
- Solved basic problems using HashMaps:
  1. Find the **frequency of every key** in a dataset.  
  2. Find the **key with maximum and minimum frequency**.  
- Practiced iterating through keys and values efficiently.  

Outcome:
- Learned how to apply HashMaps to count occurrences.  
- Gained understanding of finding max/min values using HashMap.  
- Built confidence to use HashMaps for solving real DSA problems.
